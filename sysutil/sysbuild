#!/bin/sh

## This is just to document how long builds took with a given number of jobs provided.
## It will also dump /etc/make.conf to display the settings being used, which may impact build times.
## This script was created on DragonFly BSD 4.8.1, other BSDs should be similar, but Linux will need an entirely different script.

## The script defaults to using ncpu
if [ -x /sbin/sysctl ]
then 
	buildjobs=$(sysctl -n hw.ncpu)
else 
	buildjobs=1
fi
logfile="sysbuild.log"
all=1
upload=0

build_all(){
	## actually do everything
	test_logfile
	echo -e "System build starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	echo -e "Buildworld starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	make -j ${buildjobs} buildworld -C /usr/src >> ${logfile} 2>&1
	if [ $? -ne 0 ]
	then 
		echo -e "Build target failed, see backlog for more information."
		exit 3
	fi
	echo -e "Buildworld completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	echo -e "Buildkernel starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	make -j ${buildjobs} buildkernel -C /usr/src >> ${logfile} 2>&1
	if [ $? -ne 0 ]
	then 
		echo -e "Build target failed, see backlog for more information."
		exit 3
	fi
	echo -e "Buildkernel completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	echo -e "Installkernel starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	make installkernel -C /usr/src >> ${logfile} 2>&1
	if [ $? -ne 0 ]
	then 
		echo -e "Build target failed, see backlog for more information."
		exit 3
	fi
	echo -e "Installkernel completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	echo -e "Installworld starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	make installworld -C /usr/src >> ${logfile} 2>&1
	if [ $? -ne 0 ]
	then 
		echo -e "Build target failed, see backlog for more information."
		exit 3
	fi
	echo -e "Installworld completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}

	## Special step on DragonFly to help prevent system breakage
	if [ `uname -s` = "DragonFly" ]
	then
		echo -e "Upgrade running..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
		make upgrade  -C /usr/src >> ${logfile} 2>&1
		echo -e "Upgrade completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	fi
	echo -e "System build completed!\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}

	if [ $upload -ne 0 ]
	then 
		upload
	fi
	exit 0
}

build_kernel(){
	## Only build the kernel 
	echo -e "Buildkernel starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	make -j ${buildjobs} buildkernel -C /usr/src >> ${logfile} 2>&1
	echo -e "Buildkernel completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}

	if [ $upload -ne 0 ]
	then 
		upload
	fi
	exit 0
}

build_world(){
	## Only build world
	echo -e "Buildworld starting..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}
	make -j ${buildjobs} buildworld -C /usr/src >> ${logfile} 2>&1
	echo -e "Buildworld completed..\t$(date +%Y%m%d\ %H%M)" | tee -a ${logfile}

	if [ $upload -ne 0 ]
	then
		upload
	fi
	exit 0
}

run(){
	## Do the things
	if [ -z $world ]
	then 
		if [ -z $kernel ]
		then
			if [ -z $all ]
			then
				## This should never be reached
				echo -e "Something went wrong, verify your flags and re-run with \'sh -vxc sysbuild.sh\'"
			else
				build_all
			fi
		else
			build_kernel
		fi
	else
		build_world
	fi
}

test_logfile(){
	## verify that we can actually write to the given directory 
	touch ${logfile}; 
	if [ $? -ne 0 ] 
	then
		echo -e "ERR: can't write to ${logfile}"
		exit 2
	else 
		:>${logfile}
		cat /etc/make.conf >> ${logfile}
		echo -e "\t\t===========================================================================\t\t" >> ${logfile}
		echo -e "\t\t\t\tUSING\t\"-j${buildjobs}\" TO BUILD" >> ${logfile}
		echo -e "\t\t===========================================================================\t\t" >> ${logfile}
	fi
}

usage(){
	## Help information
	echo -e "sysbuild.sh: record times for system builds"
	echo -e "\t-a\tBuild world, kernel, and install them (default)" 
	echo -e "\t-h\tThis message"
	echo -e "\t-j\tBuild jobs passed to make, defaults to the number of cpus (current setting: ${buildjobs})"
	echo -e "\t-k\tOnly build the kernel (useful for testing a new KERNCONF)"
	echo -e "\t-f\tSet custom logfile, defaults to ${logfile}"
	echo -e "\t-u\tUpload resulting file to ix.io (requires curl)"
	echo -e "\t-w\tBuild world only"
	exit 0
}

upload(){
	## Upload the resulting file contents to ix.io for easy sharing
	cat ${logfile} | curl -F 'f:1=<-' ix.io
}

while getopts ":h?j:f:uakw" opt;
do 
	case $opt in
		a)
			all=1
		;;
		f)
			logfile="$OPTARG"
		;;
		h)
			usage;
		;;
		j)
			buildjobs="$OPTARG"
		;;
		k)
			kernel=1
			all=0
		;;
		u)
			upload=1;
		;;
		w)
			world=1
			all=0
		;;
		'?')
			usage;
		;;
		\?)
			usage;
		;;
	esac
done

## now run the thing
run
