// C++ naming conventions and reserved words
// Created 20150712

// Variable Names

int value; // good
int Value; // bad, always start with lowercase
int VALUE; // bad, stick with lowercase as much as possible
int VaLuE; // very bad. don't ever do this shit.

int my_variable_name; // good, underscores are awesome
int myVariableName; // good, camelCase is also accepted
int my variable name; // bad, creating multiple vars here
int MyVariableName; // bad, stick to lowercase

// Some examples of var names
int ccount; // bad, what's a ccount?
int customerCount; // good, obvious what's happening
int i; // generally a bad idea, except in simple functions
int index; // could be clearer
int totalScore; // great, obvious
int _count; // don't start vars with underscores
int count; // ok, but what are we counting?
int data; // bad, what data?
int value1, value2; // can be difficult to keep them straight
int numberOfApples; // good, very clear
int monsterskilled; // good, very clear
int x, y; // bad idea in anything other than very basic functions or math

// Reading long lines
It's best to split long lines with a tab on the subsequent line:

cout << "this is an example of a line going on for much longer than is"<<
     "reasonable to have on one line";

// Forward Declaration
It is possible to run a function after main(), but if it's not declared prior
to main, or written in its entirety, we need to use a forward declaration.
Such as:

int add(int x, int y);

this gives the system enough information to run the function called after
main(). This particular statement happens to be called a prototype.

// Reserved C++ keywords
// * these 15 keywords added in C++ 98
// ** these 9 keywords added in C++ 11
alignas **
alignof **
asm
auto
bool *
break
case
catch
char
char16_t **
char32_t **
class
const
constexpr **
const_cast *
continue
decltype
default
delete
do
double
dynamic_cast *
else
enum
explicit *
export *
extern
false *
float
for
friend
goto
if
inline
int
long
mutable *
namespace *
new
noexcept **
nullptr **
operator
private
protected
public
register
reinterpret_cast *
return
short
signed
sizeof
static
static_assert **
static_cast *
struct
switch
template
this
thread_local **
throw
true *
try
typedef
typeid *
typename *
union
unsigned
using *
virtual
void
volatile
wchar_t *
while
